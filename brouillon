n'y a t-il pas de bonhomme au niveau de pgf-umlsd ? Utilisateur doit Ãªtre un stickman car c'est un utilisateur humain.
 S'il n'y en a pas, voici des exemples de comment utiliser tikz-uml

\begin{tikzpicture}
\begin{umlseqdiag}
\umlactor{A}
\umlactor{B}
\umlobject{C}
\begin{umlcall}{A}{C}
\begin{umlcall}{C}{A}
\end{umlcall}
\begin{umlcall}{B}{C}
\begin{umlcall}{C}{B}
\end{umlcall}
\begin{umlcall}[return=1]{B}{C}
\end{umlcall}
\end{umlcall}
\begin{umlcall}[dt=20, return=1]{A}{C}
\end{umlcall}
\end{umlcall}
\end{umlseqdiag}
\end{tikzpicture}

\begin{tikzpicture}
\begin{umlseqdiag}
\umlactor{A}
\umlactor{B}
\umlobject{C}
\begin{umlcall}{A}{C}
\begin{umlcall}{C}{A}
\end{umlcall}
\begin{umlcall}[dt=10]{B}{C}
\begin{umlcall}{C}{B}
\end{umlcall}
\begin{umlcall}[return=1]{B}{C}
\end{umlcall}
\end{umlcall}
\begin{umlcall}[dt=20, return=1]{A}{C}
\end{umlcall}
\end{umlcall}
\end{umlseqdiag}
\end{tikzpicture}


\begin{tikzpicture}
\begin{umlseqdiag}
\umlobject[class=A]{a}
\umlobject[class=B]{b}
\begin{umlcall}[op={call(i,k)}, return=2]{a}{b}
\end{umlcall}
\end{umlseqdiag}
\end{tikzpicture}

\begin{tikzpicture}
\begin{umlseqdiag}
\umlobject[class=A]{a}
\umlcreatecall[class=B]{a}{b}
\begin{umlfragment}[type=alt, label=i>5, name=alt, inner xsep=2]
\begin{umlcall}[op={call(i,k)}, dt=7, return=2]{a}{b}
\end{umlcall}
\end{umlfragment}
\umlnote[x=2, y=-5]{alt}{note on alt fragment}
\end{umlseqdiag}
\end{tikzpicture}

\begin{umlseqdiag}
\umlactor[class=A]{a}
\umldatabase[class=B, fill=blue!20]{b}
\umlmulti[class=C]{c}
\umlobject[class=D]{d}
\begin{umlcall}[op=opa(), type=synchron, return=0]{a}{b}

  \begin{umlcall}[op=opb(), type=synchron, return=1]{b}{c}

  \begin{umlcall}[op=opc(), type=asynchron, fill=red!10]{c}{d}
\end{umlcall}
\begin{umlcall}[type=return]{c}{b}
\end{umlcall}

  \begin{umlcall}[op=opd(), type=synchron, return=3]{c}{d}
\end{umlcall}

  \end{umlcall}

  \begin{umlcallself}[op=ope(), type=synchron, return=4]{b}

  \begin{umlcall}[op=opf(), type=synchron, return=5]{b}{c}
\end{umlcall}

  \end{umlcallself}

  \end{umlcall}
\umlcreatecall[class=E, x=8]{a}{e}

  \begin{umlcall}[op=opg(), name=test, type=synchron, return=6, dt=7, fill=red!10]{a}{e}
\umlcreatecall[class=F, stereo=boundary, x=12]{e}{f}
\end{umlcall}
\begin{umlcall}[op=oph(), type=synchron, return=7]{a}{e}
\end{umlcall}

  \end{umlcall}

